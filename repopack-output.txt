This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-17T16:04:25.371Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
load_this_folder_unpacked/
  background.js
  manifest.json
  popup.html
  popup.js
.gitattributes
bookmarklets-export-2024-10-16.json
README.md

================================================================
Repository Files
================================================================

================
File: load_this_folder_unpacked/background.js
================
// background.js
chrome.runtime.onInstalled.addListener(function() {
  const initialBookmarklets = {
    "Highlight Text": {
      code: "(function(){var s=document.getSelection();var r=document.createElement('span');r.style.backgroundColor='yellow';s.getRangeAt(0).surroundContents(r);})();",
      folder: "Text Utilities"
    },
    "Count Words": {
      code: "(function(){var words = document.body.innerText.trim().split(/\s+/).length; alert('This page contains approximately ' + words + ' words.');})();",
      folder: "Text Utilities"
    },
    "Copy Full HTML": {
      code: "(function(){var h=document.documentElement.outerHTML;var t=document.createElement('textarea');t.value='<!DOCTYPE html>\\n'+h;document.body.appendChild(t);t.select();try{var s=document.execCommand('copy');var m=s?'successful':'unsuccessful';console.log('Copying HTML was '+m)}catch(e){console.error('Unable to copy HTML: ',e)}document.body.removeChild(t);alert('Full HTML has been copied to the clipboard! ('+h.length+' characters)')})();",
      folder: "DOM Tools"
    }
  };

  chrome.storage.sync.set({bookmarklets: initialBookmarklets}, function() {
    console.log("Initial bookmarklets created");
  });
});

================
File: load_this_folder_unpacked/manifest.json
================
{
  "manifest_version": 3,
  "name": "Enhanced Bookmarklet Manager",
  "version": "2.0",
  "description": "Store, execute, export, import, and organize bookmarklets with improved handling of complex scripts",
  "permissions": [
    "storage",
    "activeTab",
    "scripting"
  ],
  "host_permissions": [
    "<all_urls>"
  ],
  "action": {
    "default_popup": "popup.html"
  },
  "background": {
    "service_worker": "background.js"
  }
}

================
File: load_this_folder_unpacked/popup.html
================
<!DOCTYPE html>
<html>
<head>
  <title>Enhanced Bookmarklet Manager</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 p-4 w-96">
  <h2 class="text-2xl font-bold mb-4">Bookmarklets</h2>
  <div class="mb-4">
    <select id="folderList" class="w-full p-2 border rounded mb-2">
      <option value="">Select a folder</option>
    </select>
    <div class="flex">
      <select id="bookmarkletList" class="flex-grow p-2 border rounded">
        <option value="">Select a bookmarklet</option>
      </select>
      <button id="deleteButton" class="ml-2 bg-red-500 text-white p-2 rounded hover:bg-red-600">Delete</button>
    </div>
  </div>
  <button id="executeButton" class="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 mb-4">Execute</button>
  
  <h3 class="text-xl font-semibold mb-2">Add New Bookmarklet</h3>
  <input type="text" id="nameInput" placeholder="Name" class="w-full p-2 border rounded mb-2">
  <input type="text" id="folderInput" placeholder="Folder (optional)" class="w-full p-2 border rounded mb-2">
  <textarea id="codeInput" placeholder="JavaScript code" class="w-full p-2 border rounded mb-2 h-48"></textarea>
  <button id="saveButton" class="w-full bg-green-500 text-white p-2 rounded hover:bg-green-600 mb-4">Save</button>
  
  <div class="flex justify-between mb-4">
    <button id="exportButton" class="w-1/2 mr-2 bg-purple-500 text-white p-2 rounded hover:bg-purple-600">Export</button>
    <button id="importButton" class="w-1/2 ml-2 bg-yellow-500 text-white p-2 rounded hover:bg-yellow-600">Import</button>
  </div>
  <input type="file" id="fileInput" accept=".json" class="hidden">
  
  <script src="popup.js"></script>
</body>
</html>

================
File: load_this_folder_unpacked/popup.js
================
// popup.js
document.addEventListener('DOMContentLoaded', function() {
  const folderList = document.getElementById('folderList');
  const bookmarkletList = document.getElementById('bookmarkletList');
  const executeButton = document.getElementById('executeButton');
  const deleteButton = document.getElementById('deleteButton');
  const nameInput = document.getElementById('nameInput');
  const folderInput = document.getElementById('folderInput');
  const codeInput = document.getElementById('codeInput');
  const saveButton = document.getElementById('saveButton');
  const exportButton = document.getElementById('exportButton');
  const importButton = document.getElementById('importButton');
  const fileInput = document.getElementById('fileInput');

  function loadBookmarklets() {
    chrome.storage.sync.get(null, function(data) {
      const bookmarklets = {};
      const folders = new Set(['']);
      
      for (let key in data) {
        if (key.startsWith('bm_')) {
          const name = key.slice(3);
          bookmarklets[name] = data[key];
          folders.add(data[key].folder || '');
        }
      }

      folderList.innerHTML = '<option value="">Select a folder</option>';
      bookmarkletList.innerHTML = '<option value="">Select a bookmarklet</option>';
      
      for (let folder of folders) {
        let option = new Option(folder || '(No folder)', folder);
        folderList.add(option);
      }
    });
  }

  function updateBookmarkletList() {
    const selectedFolder = folderList.value;
    chrome.storage.sync.get(null, function(data) {
      bookmarkletList.innerHTML = '<option value="">Select a bookmarklet</option>';
      for (let key in data) {
        if (key.startsWith('bm_')) {
          const name = key.slice(3);
          const info = data[key];
          if (info.folder === selectedFolder) {
            let option = new Option(name, name);
            bookmarkletList.add(option);
          }
        }
      }
    });
  }

  loadBookmarklets();

  folderList.addEventListener('change', updateBookmarkletList);

  executeButton.addEventListener('click', function() {
    const selectedName = bookmarkletList.value;
    if (selectedName) {
      chrome.storage.sync.get(`bm_${selectedName}`, function(data) {
        const bookmarklet = data[`bm_${selectedName}`];
        executeBookmarklet(bookmarklet.code);
      });
    }
  });

  deleteButton.addEventListener('click', function() {
    const selectedName = bookmarkletList.value;
    if (selectedName) {
      if (confirm(`Are you sure you want to delete the bookmarklet "${selectedName}"?`)) {
        chrome.storage.sync.remove(`bm_${selectedName}`, function() {
          loadBookmarklets();
          alert(`Bookmarklet "${selectedName}" has been deleted.`);
        });
      }
    } else {
      alert('Please select a bookmarklet to delete.');
    }
  });

  saveButton.addEventListener('click', function() {
    const name = nameInput.value;
    const folder = folderInput.value;
    let code = codeInput.value;
    if (name && code) {
      // Remove 'javascript:' prefix if present
      code = code.replace(/^javascript:/, '');
      
      const bookmarklet = { code, folder };
      chrome.storage.sync.set({ [`bm_${name}`]: bookmarklet }, function() {
        if (chrome.runtime.lastError) {
          alert('Error saving bookmarklet: ' + chrome.runtime.lastError.message);
        } else {
          loadBookmarklets();
          nameInput.value = '';
          folderInput.value = '';
          codeInput.value = '';
          alert('Bookmarklet saved successfully!');
        }
      });
    } else {
      alert('Please enter both name and code for the bookmarklet.');
    }
  });

  exportButton.addEventListener('click', function() {
    chrome.storage.sync.get(null, function(data) {
      const exportData = {};
      for (let key in data) {
        if (key.startsWith('bm_')) {
          const name = key.slice(3);
          exportData[name] = {
            code: data[key].code,
            folder: data[key].folder
          };
        }
      }
      
      const bookmarkletsJson = JSON.stringify(exportData, null, 2);
      const blob = new Blob([bookmarkletsJson], {type: 'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `bookmarklets-export-${new Date().toISOString().slice(0, 10)}.json`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    });
  });

  importButton.addEventListener('click', function() {
    fileInput.click();
  });

  fileInput.addEventListener('change', function(event) {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function(e) {
        try {
          const importedBookmarklets = JSON.parse(e.target.result);
          const savePromises = Object.entries(importedBookmarklets).map(([name, info]) => {
            return new Promise((resolve) => {
              chrome.storage.sync.set({
                [`bm_${name}`]: {
                  code: info.code,
                  folder: info.folder
                }
              }, resolve);
            });
          });

          Promise.all(savePromises).then(() => {
            loadBookmarklets();
            alert('Bookmarklets imported successfully!');
          }).catch((error) => {
            alert('Error importing bookmarklets: ' + error.message);
          });
        } catch (error) {
          alert('Error importing bookmarklets: ' + error.message);
        }
      };
      reader.readAsText(file);
    }
  });

  function executeBookmarklet(code) {
    // Decode the URL-encoded bookmarklet
    code = decodeURIComponent(code);
    
    console.log('Executing bookmarklet:', code);
  
    chrome.tabs.query({active: true, currentWindow: true}, function(tabs) {
      chrome.scripting.executeScript({
        target: {tabId: tabs[0].id},
        func: (bookmarkletCode) => {
          const script = document.createElement('script');
          script.textContent = `(() => { ${bookmarkletCode} })();`;
          document.body.appendChild(script);
          document.body.removeChild(script);
        },
        args: [code],
        world: "MAIN"
      }, handleExecutionResult);
    });
  }

  function injectAndExecuteCode(code) {
    console.log('Injected code:', code);  // Log the injected code
    try {
      // Wrap the code in a try-catch block to catch any runtime errors
      const result = eval(code);
      console.log('Bookmarklet execution result:', result);  // Log the result
      return { success: true, result: result };
    } catch (error) {
      console.error('Error in bookmarklet execution:', error);  // Log any errors
      return { error: error.toString() };
    }
  }

  function handleExecutionResult(results) {
    if (chrome.runtime.lastError) {
      console.error('Error executing bookmarklet:', chrome.runtime.lastError);
      alert('Error executing bookmarklet: ' + chrome.runtime.lastError.message);
    } else if (results && results[0]) {
      if (results[0].result && results[0].result.error) {
        console.error('Error in bookmarklet execution:', results[0].result.error);
        alert('Error in bookmarklet execution: ' + results[0].result.error);
      } else {
        console.log('Bookmarklet executed successfully:', results[0].result);
        alert('Bookmarklet executed successfully');
      }
    } else {
      console.log('Bookmarklet execution completed without result');
      alert('Bookmarklet execution completed');
    }
  }

});

================
File: .gitattributes
================
# Auto detect text files and perform LF normalization
* text=auto

================
File: bookmarklets-export-2024-10-16.json
================
{
  "ActionBoard to Clipboard/CSV": {
    "code": "(function(){function e(){const e=document.querySelectorAll(\".sc-bcXHqe.lfnocK\");let t=\"Priority,Task,# of URLs,Parsed URLs,Link\\n\";return e.forEach(e=>{const n=e.querySelector(\".sc-eDvSVe.hdhczN, .sc-eDvSVe.cYQhmy\"),r=n?n.textContent.trim():\"\",o=e.querySelector(\".sc-eDvSVe.laOPzm\").textContent.trim(),c=e.querySelector(\".sc-eDvSVe.bchHWl\"),l=c?c.textContent.trim():\"\",a=e.querySelector(\"a.sc-jSUZER.eXXHeO\"),s=a?a.href:\"\",i=l.toLowerCase().includes(\"m\")?1e6*parseFloat(l.replace(/[^0-9.]/g,\"\")):l.toLowerCase().includes(\"k\")?1e3*parseFloat(l.replace(/[^0-9.]/g,\"\")):parseInt(l.replace(/[^0-9]/g,\"\"))||0;t+=%60\"${r}\",\"${o}\",\"${l}\",${i},\"${s}\"\\n%60}),t}function t(){const e=document.querySelector('[data-test-id=\"pageheader-project-name-text\"]'),t=e?e.textContent.trim().replace(/[^a-zA-Z0-9]/g,\"_\"):\"unknown_client\",n=document.querySelector(\".AnalysisSelector__currentContainer .DropdownButton__label\"),r=n?n.textContent.trim():\"\",o=r.replace(/\\s/g,\"_\").replace(/\\./g,\"\");return{clientName:t,date:o}}function n(e,t){const n=new Blob([e],{type:\"text/csv;charset=utf-8;\"}),r=document.createElement(\"a\");if(void 0!==r.download){const e=URL.createObjectURL(n);r.setAttribute(\"href\",e),r.setAttribute(\"download\",t),r.style.visibility=\"hidden\",document.body.appendChild(r),r.click(),document.body.removeChild(r)}}function r(e){const t=document.createElement(\"textarea\");t.value=e,document.body.appendChild(t),t.select(),document.execCommand(\"copy\"),document.body.removeChild(t)}const o=e();r(o);const{clientName:c,date:l}=t(),a=%60${c}_botify_data_${l}.csv%60;n(o,a),alert(\"Data copied to clipboard and CSV file downloaded!\")})();",
    "folder": "Botify"
  },
  "Copy Full HTML": {
    "code": "(function(){var h=document.documentElement.outerHTML;var t=document.createElement('textarea');t.value='<!DOCTYPE html>\\n'+h;document.body.appendChild(t);t.select();try{var s=document.execCommand('copy');var m=s?'successful':'unsuccessful';console.log('Copying HTML was '+m)}catch(e){console.error('Unable to copy HTML: ',e)}document.body.removeChild(t);alert('Full HTML has been copied to the clipboard! ('+h.length+' characters)')})();",
    "folder": "DOM Tools"
  },
  "Count Words": {
    "code": "(function(){var words = document.body.innerText.trim().split(/s+/).length; alert('This page contains approximately ' + words + ' words.');})();",
    "folder": "DOM Tools"
  },
  "GA Tag Review": {
    "code": "(function(){javascript:(function()%7Bfunction e()%7Blet e%3D%5B%5D%3Breturn\"undefined\"!%3Dtypeof ga%26%26ga(function()%7Bga.getAll().forEach(function(t)%7Be.push(\"UA%3A \"%2Bt.get(\"trackingId\"))%7D)%7D)%2C\"undefined\"!%3Dtypeof gtag%26%26Object.keys(window).filter(e%3D>e.startsWith(\"gtag_\")).forEach(function(t)%7Be.push(\"GA4%3A \"%2Bt.split(\"_\")%5B1%5D)%7D)%2C\"undefined\"!%3Dtypeof google_tag_manager%26%26Object.keys(google_tag_manager).forEach(function(t)%7Bt.startsWith(\"GT\")%26%26e.push(\"GTM%3A \"%2Bt)%7D)%2C\"undefined\"!%3Dtypeof dataLayer%26%26dataLayer.length>0%26%26dataLayer.forEach(function(t)%7B\"config\"%3D%3D%3Dt%5B0%5D%26%26t%5B1%5D.startsWith(\"G-\")%26%26e.push(\"GA4 (dataLayer)%3A \"%2Bt%5B1%5D)%7D)%2Ce%7Dfunction t()%7Blet t%3De()%2Cn%3Dt.length>0%3F\"Google Analytics Codes found%3A%5Cn%5Cn\"%2Bt.join(\"%5Cn\")%3A\"No Google Analytics codes found. The site might be using a different analytics solution or the GA code hasn't loaded yet.\"%3Balert(n)%3Blet o%3Ddocument.createElement(\"textarea\")%3Bo.value%3Dn%2Cdocument.body.appendChild(o)%2Co.select()%2Cdocument.execCommand(\"copy\")%2Cdocument.body.removeChild(o)%2Cconsole.log(n)%2Cconsole.log(\"Results copied to clipboard!\")%7Dt()%7D)()%3B})();",
    "folder": "Analytics"
  },
  "HTML to Markdown": {
    "code": "(function(){function e(e){let t=e.replace(/^(https?:\\/\\/)?(www\\.)?/,'').replace(/[/?#]/g,'_');return`${t}_${new Date().toISOString().split('T')[0]}.md`}function t(){return document.body.innerText}function n(e,t){let n=new Blob([e],{type:\"text/markdown;charset=utf-8\"}),o=document.createElement(\"a\");o.href=URL.createObjectURL(n),o.download=t,o.style.display=\"none\",document.body.appendChild(o),o.click(),document.body.removeChild(o)}let o=t(),a=e(window.location.href);n(o,a)})();",
    "folder": "DOM Tools"
  },
  "Internal Links to TXT": {
    "code": "(function(){javascript:(function(){let links=Array.from(document.querySelectorAll('a')).map(a=>{let selector=a.closest('[class]')?a.closest(%27[class]%27).getAttribute(%27class%27):%27No specific class%27;return`${selector}: ${a.href}`;});let uniqueLinks=Array.from(new Set(links));let date=new Date().toISOString().split(%27T%27)[0];let content=`Extracted on ${date}\\n\\n${uniqueLinks.join(%27\\n%27)}`;let blob=new Blob([content],{type:%27text/plain%27});let a=document.createElement(%27a%27);a.href=URL.createObjectURL(blob);let cleanName=document.location.hostname.replace(/^www\\./,%27%27)+document.location.pathname.replace(/[^a-z0-9]/gi,%27_%27);a.download=`links_${cleanName}_${date}.txt`;a.click();URL.revokeObjectURL(a.href);})();})();",
    "folder": "DOM Tools"
  },
  "Jump Links to Console": {
    "code": "(function(){javascript:(function()%7Bfunction e()%7Blet e%3Ddocument.querySelectorAll('a%5Bhref%5E%3D\"%23\"%5D')%2Ct%3D%5B%5D%3Breturn e.forEach(e%3D>%7Blet n%3De.getAttribute(\"href\")%2Cr%3Dn.substring(1)%2Ci%3Ddocument.getElementById(r)%3Bt.push(%7Bhref%3An%2Ctext%3Ae.textContent.trim()%7C%7C\"%5BNo Text%5D\"%2Cvalid%3A\"%23\"%3D%3D%3Dn%7C%7C!!i%7D)%7D)%2Ct%7Dfunction t(e)%7Blet t%3D\"All Jump Links%3A%5Cn%5Cn\"%3Be.forEach(e%3D>%7Blet n%3De.valid%3F\"Valid\"%3A\"Broken\"%3Bt%2B%3D%60%24%7Be.href%7D (%24%7Be.text%7D) - %24%7Bn%7D%5Cn%60%7D)%2Calert(t)%3Blet n%3Ddocument.createElement(\"textarea\")%3Bn.value%3Dt%2Cdocument.body.appendChild(n)%2Cn.select()%2Cdocument.execCommand(\"copy\")%2Cdocument.body.removeChild(n)%2Cconsole.log(t)%2Cconsole.log(\"Results copied to clipboard!\")%7Dlet n%3De()%3Bt(n)%7D)()%3B})();",
    "folder": "DOM Tools"
  },
  "Schema to TXT": {
    "code": "(function(){javascript:(function(){function e(){return Array.from(document.querySelectorAll('script[type=\"application/ld+json\"]')).map(e=>e.textContent).join(\"\\n\\n\")}function t(){return Array.from(document.querySelectorAll(\"[itemscope]\")).map(e=>Array.from(e.querySelectorAll(\"[itemprop]\")).map(e=>`${e.getAttribute(\"itemprop\")}: ${e.textContent.trim()}`).join(\"\\n\")).join(\"\\n\\n\")}function n(e){return e.replace(/^(https?:\\/\\/)?(www\\.)?/,\"\").replace(/[^a-z0-9]/gi,\"_\").toLowerCase()}const o=e(),r=t(),c=`JSON-LD:\\n${o}\\n\\nMicrodata:\\n${r}`,a=n(window.location.hostname+window.location.pathname),i=new Date().toISOString().split(\"T\")[0],l=`${a}_${i}.txt`,s=new Blob([c],{type:\"text/plain\"}),p=document.createElement(\"a\");p.href=URL.createObjectURL(s),p.download=l,p.click(),URL.revokeObjectURL(p.href)})();})();",
    "folder": "DOM Tools"
  },
  "Tag Checker": {
    "code": "(function(){javascript:(function(){function e(){let e=[],t=document.querySelector('script[src*=\"activation.js\"]'),n=!!window.google_tag_manager,a=!!window.utag;e.push(`Botify script tag present: ${!!t}`),e.push(`Google Tag Manager present: ${n}`),e.push(`Tealium present: ${a}`);let o=[\"Botify\",\"BotifyActivation\",\"_botify\"];o.forEach(t=>{e.push(`Global object \"${t}\" present: ${!!window[t]}`)});let r=performance.getEntriesByType(\"resource\").filter(e=>e.name.includes(\"activation.js\"));e.push(`Botify script loaded: ${r.length>0}`);let i=document.querySelectorAll(\"[data-botify]\");e.push(`Elements with Botify data attributes: ${i.length}`);let s=Array.from(document.scripts).map(e=>({src:e.src,async:e.async,defer:e.defer,type:e.type})),l=performance.getEntriesByType(\"resource\").filter(e=>e.initiatorType===\"script\"),c=l.filter(e=>e.name.includes(\"activation.js\")||e.name.toLowerCase().includes(\"botify\")),d=new Date,u=`${d.getFullYear()}${String(d.getMonth()+1).padStart(2,\"0\")}${String(d.getDate()).padStart(2,\"0\")}`,p=window.location.hostname+window.location.pathname.replace(/[^a-z0-9]/gi,\"-\"),f={results:e,allScripts:s,networkScripts:l,botifyScripts:c},m=JSON.stringify(f,null,2),h=new Blob([m],{type:\"application/json\"}),y=document.createElement(\"a\");y.href=URL.createObjectURL(h),y.download=`tag-audit-${p}-${u}.json`,y.click(),URL.revokeObjectURL(y.href);let w=\"Name,Start Time,Duration,Initiator Type,Delivery Type,Next Hop Protocol,Render Blocking Status,Worker Start,Redirect Start,Redirect End,Fetch Start,Domain Lookup Start,Domain Lookup End,Connect Start,Secure Connection Start,Connect End,Request Start,Response Start,First Interim Response Start,Response End,Transfer Size,Encoded Body Size,Decoded Body Size,Response Status\\n\"+c.map(e=>`\"${e.name}\",${e.startTime},${e.duration},\"${e.initiatorType}\",\"${e.deliveryType}\",\"${e.nextHopProtocol}\",\"${e.renderBlockingStatus}\",${e.workerStart},${e.redirectStart},${e.redirectEnd},${e.fetchStart},${e.domainLookupStart},${e.domainLookupEnd},${e.connectStart},${e.secureConnectionStart},${e.connectEnd},${e.requestStart},${e.responseStart},${e.firstInterimResponseStart},${e.responseEnd},${e.transferSize},${e.encodedBodySize},${e.decodedBodySize},${e.responseStatus}`).join(\"\\n\"),v=new Blob([w],{type:\"text/csv\"}),S=document.createElement(\"a\");S.href=URL.createObjectURL(v),S.download=`botify-scripts-${p}-${u}.csv`,S.click(),URL.revokeObjectURL(S.href),alert(e.join(\"\\n\"))}e();})();})();",
    "folder": "Botify"
  },
  "action": {},
  "background": {},
  "description": {},
  "host_permissions": {},
  "manifest_version": {},
  "name": {},
  "permissions": {},
  "version": {}
}

================
File: README.md
================
# Enhanced Bookmarklet Manager

Enhanced Bookmarklet Manager is a Chrome extension that allows you to easily manage, organize, and execute your bookmarklets directly from your browser.

## Features

1. **Organize Bookmarklets**: Store your bookmarklets in folders for easy categorization and access.
2. **Execute Bookmarklets**: Run your bookmarklets with a single click directly from the extension popup.
3. **Add and Edit**: Easily add new bookmarklets or edit existing ones.
4. **Delete Bookmarklets**: Remove unwanted bookmarklets from your collection.
5. **Import and Export**: Share your bookmarklet collection or backup your data with import/export functionality.

## Installation

1. Download the extension files or clone the repository.
2. Open Chrome and navigate to `chrome://extensions/`.
3. Enable "Developer mode" in the top right corner.
4. Click "Load unpacked" and select the directory containing the extension files.

## Usage

### Managing Bookmarklets

1. Click on the extension icon in your Chrome toolbar to open the popup.
2. Use the folder dropdown to navigate between different categories of bookmarklets.
3. Select a bookmarklet from the list to work with it.

### Executing a Bookmarklet

1. Select the desired bookmarklet from the dropdown list.
2. Click the "Execute" button to run the bookmarklet on the current page.

### Adding a New Bookmarklet

1. Enter a name for your bookmarklet in the "Name" field.
2. (Optional) Specify a folder name to categorize your bookmarklet.
3. Paste or type your JavaScript code into the code textarea.
4. Click "Save" to add the bookmarklet to your collection.

### Deleting a Bookmarklet

1. Select the bookmarklet you want to remove from the dropdown list.
2. Click the "Delete" button and confirm the action.

### Exporting Bookmarklets

1. Click the "Export" button to save all your bookmarklets as a JSON file.
2. Choose a location on your computer to save the file.

### Importing Bookmarklets

1. Click the "Import" button.
2. Select a previously exported JSON file containing bookmarklets.
3. The imported bookmarklets will be added to your collection.

## Development

The extension consists of the following main files:

- `manifest.json`: Extension configuration
- `popup.html`: HTML structure for the extension popup
- `popup.js`: JavaScript code for handling user interactions and managing bookmarklets

To modify the extension:

1. Edit the relevant files.
2. Save your changes.
3. Go to `chrome://extensions/` in Chrome.
4. Click the refresh icon on the extension card to update it with your changes.

## Security Note

Be cautious when importing bookmarklets from unknown sources, as they can execute arbitrary JavaScript code on web pages you visit. Always review the code before adding or importing new bookmarklets.

## Contributing

Contributions to improve the Enhanced Bookmarklet Manager are welcome. Please feel free to submit pull requests or open issues to suggest improvements or report bugs.

## License

[Insert your chosen license here, e.g., MIT License, GPL, etc.]
